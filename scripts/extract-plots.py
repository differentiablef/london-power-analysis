# imports ######################################################################

import os, sys, json
import matplotlib.pyplot as plt
import pandas as pd

# variables ####################################################################

nb_dir = os.path.join('.', 'notebooks')
nb_ext = '.ipynb'

found_init = False
show_called = False

def do_something_useful():
    global show_called
    show_called = True
    pass


# setup context ################################################################

# change directory to the notebook directory (since that's where they run from)
os.chdir(nb_dir) 

# pull in pickup_utilities and load complete data into 'df'
from pickup_utilities import *
df = pd.read_csv('../data/complete.csv')
df['tstamp'] = df.apply(tstampCalc, axis = 1)

# overwrite show function
plt.show = do_something_useful


# script entry-point ###########################################################

# process notebooks
for filename in os.listdir( '.' ):
    if filename.endswith(nb_ext):
        # read in notebook as json, and extract 'cells' entry 
        with open(filename) as infile:
            nbcells = json.load(infile).get('cells')
            pass

        # begin processing notebook file
        print(f'- Processing {filename}')

        # search for valid initialization cell
        for ii, cell in enumerate(nbcells):
            # concat. all lines of 'source'; generating full cell source-code 
            source = ''.join( cell.get('source', []) )
            
            # search source for slack'd out snippets which ..
            #     .. should be in the notebook somewhere.
            if cell['cell_type'] == 'code' and \
               source.find('from pickup_utilities import') >=0 and \
               source.find('df = pd.read_csv("../data/complete.csv")') >= 0:
                found_init = True
                print(' + Found valid init cell')
                break # exit this loop


        # check to see if we found a valid initalization cell.
        if found_init: # if so, ...
            # reset switch
            found_init = False 

            # delete found initalization cell
            print(' + Removing initialization cell')
            del nbcells[ii]

            # generate basepath for saving plots
            figbasepath = os.path.join(
                '..', 'images', filename[:-6]) 

            # deal with remaining code cells
            print(f' + Compiling/Running remaining notebook code cells')
            for ii, cell in enumerate(nbcells):

                # concat. lines of 'source' together to get full cell source
                source = ''.join( cell.get('source', []) )

                # if 'cell_type' is 'code', then ...
                if cell['cell_type'] == 'code':
                    # compile the source into python byte-code
                    print(f'  - Compiling cell {ii}')
                    code = compile( source, filename[:-6], 'exec')

                    # execute compiled byte-code in the current 'context'
                    print(f'  - Running cell {ii}')
                    exec(code)

                    # check to see if any plots have been generated
                    if show_called:
                        # reset show_called switch
                        show_called = False

                        # save any figures generated by running 'code'
                        print(f'  - Saving plots generated by cell {ii}')
                        plt.savefig(figbasepath + f'-{ii}.png')

