# imports ######################################################################

import os, sys, json
import matplotlib.pyplot as plt
import pandas as pd

# variables ####################################################################

nb_dir = os.path.join('.', 'notebooks')
nb_ext = '.ipynb'
found_init = False
show_called = False

def do_something_useful():
    global show_called
    show_called = True
    pass


# script entry-point ###########################################################

os.chdir(nb_dir)

# our init cell
from pickup_utilities import *

df = pd.read_csv('../data/complete.csv')
df['tstamp'] = df.apply(tstampCalc, axis = 1)

# overwrite show function

plt.show = do_something_useful

for filename in os.listdir( '.' ):
    nbpath = filename
    if nbpath.endswith(nb_ext):
        with open(nbpath) as infile:
            nbcells = json.load(infile).get('cells')
            pass

        print(f'- Processing {nbpath}')
        for ii, cell in enumerate(nbcells):
            source = ''.join( cell.get('source', []) )
            # search for slack'd out snippets which should be the init cell
            if cell['cell_type'] == 'code' and \
               source.find('from pickup_utilities import') >=0 and \
               source.find('df = pd.read_csv("../data/complete.csv")') >= 0:
                found_init = True
                print(' + Found valid init cell')
                break

        if found_init:
            found_init = False # reset switch
            del nbcells[ii]    # delete initalization cell
            figbasepath = os.path.join(
                '..', 'images', filename[:-6]) # set basepath for saving plots
            
            print(f' + Compiling/running notebook cells in order.')
            for ii, cell in enumerate(nbcells):
                source = ''.join( cell.get('source', []) )
                if cell['cell_type'] == 'code':
                    print(f'  - Compiling cell {ii}')
                    code = compile( source, filename[:-6], 'exec')
                    
                    print(f'  - Running cell {ii}')
                    exec(code)

                    if show_called:
                        # reset show_called switch
                        show_called = False
                        print(f'  - Saving any plots generated by cell {ii}')
                        plt.savefig(figbasepath + f'-{ii}.png')

